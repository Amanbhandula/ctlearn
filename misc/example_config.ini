[Data Format]
# Required string (case insensitive). Data format for reading training data.
# Recognized options are "HDF5".
Format = HDF5
# Required string. Path to a text file containing paths to data files, one on
# each line
DataFilesList = /home/data/data_files_list.txt

[Data Input]
# Required int.
BatchSize = 64
# Optional int. Number of parallel data loading threads per batch. Used only
# for a data format requiring mapping ("HDF5"). Default: 1
NumParallelCalls = 1
# Optional boolean. Whether to enable prefetching. Default: True
Prefetch = True
# Optional int. Buffer size for prefetching in batches, if enabled. Default: 10
PrefetchBufferSize = 10
# Optional boolean. Whether to enable shuffling before each epoch. Default: True
Shuffle = True
# Optional int. Buffer size for shuffling before each epoch. Default: 10000
ShuffleBufferSize = 10000

[Data Processing]
# Optional float. Fraction of total events to use for validation. 
# Default: 0.1
ValidationSplit = 0.1
# Optional string. Cut condition string (Pytables format). Only events which
# pass the cut condition will be used for training and validation.
# Default: "" (no cuts applied).
# Example: CutCondition = (mc_energy > 1.0) & (h_first_int < 20000)
CutCondition =
# Optional int. Minimum MSTS telescope multiplicity. Default: 1
MinNumTels = 1
# Optional boolean. Sort telescope data, triggers, and positions listing
# triggered telescopes first. Default: False
SortTelescopesByTrigger = False
# Optional. Use telescope positions as auxiliary input (only for array level).
# Default: True
UseTelescopePositions = True
# Optional boolean. Apply segmentation to images (crop images around the 
# shower) when training. Default: False
CropImages = False
# Optional string. Image cleaning method to apply when cropping to calculate
# the shower center. Only used if CropImages is True. Recognized options are
# "None", "TwoLevel". Default: "None"
ImageCleaningMethod = None
# Optional boolean. Whether to return the cleaned images as opposed to
# uncleaned ones when using cropping. Default: False
ReturnCleanedImages = False
# Optional int. Side length of the square bounding box/cropped region 
# (in pixels) which is centered around the shower when applying 
# image cropping. Default: 48
BoundingBoxSize = 48
# Optional float. Value of the first cut threshold (in unnormalized charge/
# pixel values). Used for applying two-level cleaning to locate the shower 
# center when using image cropping. Default: 5.5
PictureThreshold = 5.5
# Optional float. Value of the second cut threshold (in unnormalized charge/
# pixel values). Used for applying two-level cleaning to locate the shower 
# center when using image cropping. Default: 1.0
BoundaryThreshold = 1.0
# Optional boolean. Normalize the charge images by subtracting the image charge
# min and adding 1 to move the minimum value to 0, then taking the logarithm.
# Default: False
LogNormalizeCharge = False

[Model]
# Required string. Path to directory containing models.
ModelDirectory = /installation_path/ctalearn/models/
# Required string. Module in ModelDirectory containing function implementing
# model. Included, verified models are "single_tel", "cnn_rnn".
ModelModule = single_tel
# Required string. Function in ModelModule implementing model. Included,
# verified models are "single_tel_model" within "single_tel", "cnn_rnn_model"
# within "cnn_rnn".
ModelFunction = single_tel_model
# Required string. Whether the model is for single or multiple telescope
# classification. Recognized options are "singletel" or "multipletel".
ModelType = singletel

# The following options in this section are all optional and are passed
# directly to the model function. The options given here are those needed for
# the included models. Add additional parameters here as needed for custom
# models.

# Single Tel must specify Network.
# Network to be used for image classification. The only supported verified 
# function is "basic_conv_block" within "basic".
NetworkModule = basic
NetworkFunction = basic_conv_block

# CNN-RNN must specify CNNBlock.
# Network to be used for single telescope blocks. The only supported, verified
# function is "basic_conv_block" within "basic".
CNNBlockModule = basic
CNNBlockFunction = basic_conv_block

# Optional string. If specified, train on only variables within the scope
# matching this name, freezing all others (useful when loading pretrained
# weights). If not specified, train on all trainable variables.
# Ex: with CNN-RNN, will freeze CNNBlock weights, training on NetworkHead only:
# VariablesToTrain = NetworkHead
VariablesToTrain =

# The following options are supported by single_tel_model and cnn_rnn.

# Path to a checkpoint file or model directory from which to
# load pretrained CNNBlock weights. Default: "" (no weights loaded).
PretrainedWeights = 
# Float. Decay parameter for Batch Norm layers. 
BatchNormDecay = 0.95

[Training Hyperparameters]
# Required string (case insensitive). Optimizer.
# Recognized options are "Adam", "SGD", "RMSprop", "Adadelta".
Optimizer = SGD
# Required float. Base learning rate before telescope trigger batch scaling.
BaseLearningRate = 0.001
# Optional boolean. Whether to scale the learning rate (for trigger dropout).
# Not used for single telescope models.
# Default: False
ScaleLearningRate = False
# Optional float. Gradient clipping for train op. Recommend setting to 1.0 for
# CNNRNN model. Default: 0.
ClipGradientNorm = 0.
# Optional boolean. Whether to weight the loss to compensate for the class
# balance. Default: False
ApplyClassWeights = False
# Optional float. Epsilon parameter for the Adam optimizer. Ignored for other
# optimizers. Default: 1e-8
AdamOptimizer = 1e-8

[Training Settings]
# Optional int. Number of epochs to run training and validation. If 0, run
# forever. Default: 0
NumEpochs = 0
# Optional int. Number of training steps to run before evaluating on the 
# training and validation sets. Default: 1000
NumTrainingStepsPerValidation = 1000

[Logging]
# Required string. Directory to store TensorFlow model checkpoints and
# summaries. A timestamped copy of the configuration file will be made here.
ModelDirectory = /data/logs/example/

[Debug]
# Optional boolean. Whether to run TF debugger. Default: False
RunTFDBG = False
